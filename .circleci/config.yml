  
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  jq: circleci/jq@2.2.0

commands:
  extract-commit-message:
    description: Extract commit message
    steps:
      - run:
          name: Extract commit message
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" >> $BASH_ENV
            source $BASH_ENV
  slack-notification-fail:
    description: Send notification to Slack
    steps:
      - extract-commit-message

      - slack/notify:
          channel: udapeople
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Your job *$CIRCLE_JOB* has *faild* :octagonal_sign: (<$CIRCLE_BUILD_URL|build #$CIRCLE_BUILD_NUM>)\n\nrepo: $CIRCLE_REPOSITORY_URL\n\nbranch: $CIRCLE_BRANCH\n\ncommitter: $CIRCLE_USERNAME\n\ncommit message: $COMMIT_MESSAGE"
                  }
                }
              ]
            }
  slack-notification-pass:
    description: Send notification to Slack
    steps:
      - extract-commit-message

      - slack/notify:
          channel: udapeople
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Your job *$CIRCLE_JOB* has *built* :white_check_mark: (<$CIRCLE_BUILD_URL|build #$CIRCLE_BUILD_NUM>)\n\nrepo: $CIRCLE_REPOSITORY_URL\n\nbranch: $CIRCLE_BRANCH\n\ncommitter: $CIRCLE_USERNAME\n\ncommit message: $COMMIT_MESSAGE"
                  }
                }
              ]
            } 
jobs:
  lint_Dockerfile:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys: [Dockerfile-lint]
            
      - run:
          name: install dependencies
          command: |
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify
            python3 -m venv capstone
            . capstone/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./capstone
          key: Dockerfile-lint
      - run:
          name: run lint
          command: |
            . capstone/bin/activate
            make lint
      - slack-notification-fail
      - slack-notification-pass

  # Build Docker Application
  Build_DockerApp:
    docker:
      # Use the same Docker base as the project
      - image: circleci/golang:1.15
        auth:
             username: $DOCKER_USER
             password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      # build and push Docker image
      - run:
          name: Build Docker Image
          command: |
            TAG=udacity_capstone
            docker build -t $TAG .
      - run:
          name: List Docker Image
          command: |
            docker image ls
      - run:
          name: Push Docker image into Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            TAG=udacity_capstone
            dockerpath=mahitha86/$TAG
            docker tag $TAG $dockerpath
            docker push $dockerpath
      - slack-notification-fail
      - slack-notification-pass

  Deploy_AWS_Kube:
    docker:
      - image: ubuntu:18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Dependencies for Kube configuration
          command: |
            # install sudo package 
            apt-get -y -qq update
            apt-get -y install sudo
            # extras for below installs
            sudo apt-get -y install curl gnupg2 software-properties-common unzip less git dos2unix
            # install AWS CLI at latest version
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            
            # Install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Build AWS Kubernetes cluster
          command: |
            export TERM=xterm
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            nohup aws cloudformation list-exports > output.txt
            chmod 755 aws_kubernetes_infra.sh
            ./aws_kubernetes_infra.sh
      
      - run:
          name: update kube cluster
          command: |
            # # update cluster with yaml - Rolling Deployment
             aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name capstone-starkids
             kubectl apply -f capstone_deploy.yml
             kubectl get nodes
             kubectl get deployment
             kubectl get pod -o wide
             kubectl apply -f services.yml
             kubectl get services
             kubectl rollout restart deployment/capstone-starkids
             kubectl describe svc capstone-starkids
      - slack-notification-fail
      - slack-notification-pass

workflows:
  default:
    jobs:
       - lint_Dockerfile
          context: slack-secrets
       - Build_DockerApp:
          context: slack-secrets
          requires: [lint_Dockerfile]
       - Deploy_AWS_Kube:
          context: slack-secrets
          requires: [Build_DockerApp]